---
// src/pages/game.astro
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Current Game">
  <div class="max-w-6xl mx-auto px-4">
  <!-- Score Display -->
  <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
    <!-- Mobile Layout -->
    <div class="flex justify-between md:hidden">
      <!-- New Element (left on mobile) -->
      <div class="text-left">
        <p class="text-base text-gray-600" id="hand-info-mobile">Hand 1</p>
        <p class="text-lg font-medium text-gray-700" id="bid-info-mobile">Waiting for bid</p>
      </div>
      
      <!-- Stacked scores on right (mobile) -->
      <div class="flex flex-col gap-4">
        <!-- Team 1 Score -->
        <div class="text-right">
          <div class="flex items-center justify-end gap-1">
            <h2 class="text-lg font-medium text-gray-700" id="team1-name-mobile">Team 1</h2>
            <div id="team1-wins-mobile" class="flex gap-1">
              <!-- Trophy icons will be added here by JS -->
            </div>
          </div>
          <p class="text-3xl font-bold text-gray-800" id="team1-score-mobile">0</p>
        </div>
        
        <!-- Team 2 Score -->
        <div class="text-right">
          <div class="flex items-center justify-end gap-1">
            <div id="team2-wins-mobile" class="flex gap-1">
              <!-- Trophy icons will be added here by JS -->
            </div>
            <h2 class="text-lg font-medium text-gray-700" id="team2-name-mobile">Team 2</h2>
          </div>
          <p class="text-3xl font-bold text-gray-800" id="team2-score-mobile">0</p>
        </div>
      </div>
    </div>
    
    <!-- Desktop Layout -->
    <div class="hidden md:grid md:grid-cols-3 md:gap-4">
      <!-- Team 1 Score -->
      <div class="text-left">
        <div class="flex items-center justify-start gap-1">
          <h2 class="text-lg font-medium text-gray-700" id="team1-name">Team 1</h2>
          <div id="team1-wins" class="flex gap-1">
            <!-- Trophy icons will be added here by JS -->
          </div>
        </div>
        <p class="text-3xl font-bold text-gray-800" id="team1-score">0</p>
      </div>
      
      <!-- New Element (center on desktop) -->
      <div class="text-center">
        <p class="text-base text-gray-600" id="hand-info">Hand 1</p>
        <p class="text-lg font-medium text-gray-700" id="bid-info">Waiting for bid</p>
      </div>
      
      <!-- Team 2 Score -->
      <div class="text-right">
        <div class="flex items-center justify-end gap-1">
          <div id="team2-wins" class="flex gap-1">
            <!-- Trophy icons will be added here by JS -->
          </div>
          <h2 class="text-lg font-medium text-gray-700" id="team2-name">Team 2</h2>
        </div>
        <p class="text-3xl font-bold text-gray-800" id="team2-score">0</p>
      </div>
    </div>
  </div>
    <!-- Game Area -->
    <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
      <!-- Action Area (now spans 3 columns instead of 2) -->
      <div class="lg:col-span-3 space-y-6">
        <!-- Instructions -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <div class="flex justify-between items-center mb-4">
            <p class="text-lg text-gray-700" id="game-instruction">
              Waiting for game to start...
            </p>
            <button 
              id="undo-button"
              class="px-3 py-1 text-sm rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
              title="Undo last action"
              disabled
            >
              <span class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Undo
              </span>
            </button>
          </div>
        </div>
        <!-- Game Controls -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <!-- Player Selection -->
          <div id="player-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Select Player</h3>
            <div id="player-buttons" class="space-y-3">
              <div id="player-grid" class="grid grid-cols-4 gap-3">
                <!-- Player buttons will be inserted here -->
              </div>
              <!-- No one button will be added here -->
            </div>
          </div>

          <!-- Bid Selection -->
          <div id="bid-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Select Bid</h3>
            <div class="grid grid-cols-2 md:grid-cols-5 gap-3">
              <button class="btn-bid" data-bid="4">4</button>
              <button class="btn-bid" data-bid="5">5</button>
              <button class="btn-bid" data-bid="6">6</button>
              <button class="btn-bid" data-bid="M">üåô</button>
              <button class="btn-bid" data-bid="D">üåôüåô</button>
            </div>
          </div>

          <!-- Trump Selection -->
          <div id="trump-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Select Trump</h3>
            <div class="grid grid-cols-2 md:grid-cols-5 gap-3">
              <button class="btn-trump" data-suit="C">‚ô£Ô∏è</button>
              <button class="btn-trump" data-suit="D">‚ô¶Ô∏è</button>
              <button class="btn-trump" data-suit="H">‚ô•Ô∏è</button>
              <button class="btn-trump" data-suit="S">‚ô†Ô∏è</button>
              <button class="btn-trump" data-suit="N">
                <span class="text-2xl font-mathematical">‚àÖ</span>
              </button>
            </div>
          </div>

          <!-- Decision Controls -->
          <div id="decision-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Defending Team Decision</h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
              <button class="btn-decision" data-decision="F">Fold</button>
              <button class="btn-decision" data-decision="P">Play</button>
              <button class="btn-decision" id="btn-pass-1" data-decision="F1">Negotiate (+1)</button>
              <button class="btn-decision" id="btn-pass-2" data-decision="F2">Negotiate (+2)</button>
            </div>
          </div>

          <!-- Tricks Controls -->
          <div id="tricks-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Tricks Taken</h3>
            <div class="grid grid-cols-2 md:grid-cols-7 gap-3">
              {Array.from({ length: 7 }, (_, i) => (
                <button class="btn-tricks" data-tricks={i}>{i}</button>
              ))}
            </div>
          </div>

          <!-- end game controls -->
          <div id="end-game-controls" class="hidden space-y-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">End Game</h3>
            <!-- div with end game button choices will go here -->
          </div>
        </div>
      </div>

      <!-- Score Log -->
      <div id="game-history-section" class="lg:col-span-2 bg-white rounded-lg shadow-sm p-6 transition-all duration-300">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-medium text-gray-900">Game History</h3>
          <button 
            id="reverse-history-button"
            class="px-3 py-1 text-sm rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 flex items-center gap-1"
            title="Toggle chronological order"
          >
            <svg xmlns="http://www.w3.org/2000/svg" id="history-icon" class="h-4 w-4 transition-transform" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd" />
            </svg>
            <span id="reverse-button-text">Oldest First</span>
          </button>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead>
                <tr>
                    <th class="text-center text-sm font-medium text-gray-500">Hand</th>
                    <th class="text-left text-sm font-medium text-gray-500 px-4">Dealer</th>
                    <th class="text-left text-sm font-medium text-gray-500 px-4">Bid</th>
                    <th class="text-center text-sm font-medium text-gray-500" id="log-team1">Team 1</th>
                    <th class="text-center text-sm font-medium text-gray-500" id="log-team2">Team 2</th>
                </tr>
            </thead>
            <tbody id="score-log" class="divide-y divide-gray-200">
                <!-- Score log entries will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
    
    <!-- This div will hold the game statistics when game is complete -->
    <div id="game-statistics-container" class="mt-8 hidden">
      <!-- Game Statistics will be inserted here by JS -->
    </div>
    
    <!-- This is a container for the victory celebration element -->
    <div id="victory-celebration-container"></div>
    
    <!-- Developer Panel (hidden by default) -->
    <div id="developer-panel" class="hidden fixed bottom-4 right-4 bg-white border border-gray-300 rounded-lg shadow-lg p-4 w-96 z-50">
      <div class="flex justify-between items-center mb-3">
        <div>
          <h3 class="text-lg font-semibold text-gray-900">üîß Developer Panel</h3>
          <p class="text-xs text-gray-500">Press Ctrl+X to toggle (or call showDevPanel() in console)</p>
        </div>
        <button id="close-dev-panel" class="text-gray-500 hover:text-gray-700">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div class="space-y-3">
        <!-- Export Section -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Export Game Data:</label>
          <div class="flex gap-2">
            <button id="export-btn" class="flex-1 bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700">
              Export
            </button>
            <button id="copy-export-btn" class="bg-gray-600 text-white px-3 py-2 rounded text-sm hover:bg-gray-700 hidden">
              Copy
            </button>
          </div>
          <textarea id="export-data" class="w-full mt-2 p-2 border border-gray-300 rounded text-xs font-mono h-24 resize-none hidden" readonly></textarea>
        </div>
        
        <!-- Import Section -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Import Game Data:</label>
          <textarea id="import-data" class="w-full p-2 border border-gray-300 rounded text-xs font-mono h-24 resize-none" placeholder="Paste JSON game data here..."></textarea>
          <button id="import-btn" class="w-full mt-2 bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700">
            Import & Reload
          </button>
        </div>
        
        <!-- Quick Actions -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Quick Actions:</label>
          <div class="flex gap-2">
            <button id="clear-debug-btn" class="flex-1 bg-red-600 text-white px-3 py-2 rounded text-sm hover:bg-red-700">
              Clear Debug
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Base button styles */
  button {
    @apply px-4 py-2 rounded-md text-sm font-medium transition-colors
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  }

  /* Default state */
  button:not(.active) {
    @apply bg-gray-100 text-gray-700 hover:bg-gray-200;
  }

  /* Active state */
  button.active {
    @apply bg-blue-600 text-white;
  }

  /* Special buttons */
  .btn-trump[data-suit="H"], .btn-trump[data-suit="D"] {
    @apply text-red-600;
  }

  .btn-trump[data-suit="C"], .btn-trump[data-suit="S"] {
    @apply text-black;
  }
  
  /* Victory animations */
  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }
  
  .trophy-bounce {
    animation: bounce 1s ease infinite;
  }
  
  /* Confetti animation */
  @keyframes confetti-fall {
    0% {
      transform: translateY(0) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(100vh) rotate(720deg);
      opacity: 0;
    }
  }
  
  .confetti-particle {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: var(--color);
    border-radius: 50%;
    animation: confetti-fall var(--fall-duration) ease-in forwards;
  }
</style>

<script>
  import { loadGameState, startGameplay } from '../lib/game';
  
  document.addEventListener('DOMContentLoaded', () => {
    const gameData = loadGameState();
    if (gameData) {
      // Update team names for both mobile and desktop layouts
      const team1Name = document.getElementById('team1-name');
      const team2Name = document.getElementById('team2-name');
      const team1NameMobile = document.getElementById('team1-name-mobile');
      const team2NameMobile = document.getElementById('team2-name-mobile');
      
      if (team1Name) team1Name.textContent = gameData.teams[0];
      if (team2Name) team2Name.textContent = gameData.teams[1];
      if (team1NameMobile) team1NameMobile.textContent = gameData.teams[0];
      if (team2NameMobile) team2NameMobile.textContent = gameData.teams[1];
      
      // Add series trophies if in series mode
      if (gameData.isSeries && gameData.seriesScores) {
        const team1Wins = document.getElementById('team1-wins');
        const team2Wins = document.getElementById('team2-wins');
        const team1WinsMobile = document.getElementById('team1-wins-mobile');
        const team2WinsMobile = document.getElementById('team2-wins-mobile');
        
        const team1TrophyHTML = 'üèÜ'.repeat(gameData.seriesScores[0]);
        const team2TrophyHTML = 'üèÜ'.repeat(gameData.seriesScores[1]);
        
        if (team1Wins) team1Wins.innerHTML = team1TrophyHTML;
        if (team2Wins) team2Wins.innerHTML = team2TrophyHTML;
        if (team1WinsMobile) team1WinsMobile.innerHTML = team1TrophyHTML;
        if (team2WinsMobile) team2WinsMobile.innerHTML = team2TrophyHTML;
      }
      
      // Expose GameManager to window for use in victory functions
      window.GameManager = { fromJSON: (json) => startGameplay(JSON.parse(json)).constructor.fromJSON(json) };
      
      // Start gameplay with the current game data
      startGameplay(gameData);
    }
    
    // Developer Panel Setup
    setupDeveloperPanel();
    
    // Temporary: Add a global function to show the panel for testing
    window.showDevPanel = () => {
      const panel = document.getElementById('developer-panel');
      if (panel) {
        panel.classList.remove('hidden');
        console.log('Developer panel shown via window.showDevPanel()');
      } else {
        console.log('Developer panel element not found!');
      }
    };
  });
  
  function setupDeveloperPanel() {
    console.log('Setting up developer panel...');
    
    // Keyboard shortcut to toggle developer panel (Ctrl+X on Mac/PC - simple and reliable)
    document.addEventListener('keydown', (e) => {
      // Use a simple, reliable key combination that works across browsers
      if (e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey && (e.key === 'X' || e.key === 'x')) {
        console.log('Developer panel shortcut activated!');
        e.preventDefault();
        const panel = document.getElementById('developer-panel');
        if (panel) {
          console.log('Toggling panel visibility');
          panel.classList.toggle('hidden');
        } else {
          console.log('Panel element not found!');
        }
      }
    });
    
    // Close panel button
    document.getElementById('close-dev-panel')?.addEventListener('click', () => {
      const panel = document.getElementById('developer-panel');
      if (panel) panel.classList.add('hidden');
    });
    
    // Export functionality
    document.getElementById('export-btn')?.addEventListener('click', () => {
      if (typeof window.exportGame === 'function') {
        const gameData = window.exportGame();
        const exportTextarea = document.getElementById('export-data');
        const copyButton = document.getElementById('copy-export-btn');
        
        if (exportTextarea && copyButton) {
          exportTextarea.value = JSON.stringify(gameData, null, 2);
          exportTextarea.classList.remove('hidden');
          copyButton.classList.remove('hidden');
        }
      } else {
        alert('Export function not available. Make sure a game is loaded.');
      }
    });
    
    // Copy export data to clipboard
    document.getElementById('copy-export-btn')?.addEventListener('click', async () => {
      const exportTextarea = document.getElementById('export-data');
      if (exportTextarea) {
        try {
          await navigator.clipboard.writeText(exportTextarea.value);
          const button = document.getElementById('copy-export-btn');
          if (button) {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            setTimeout(() => {
              button.textContent = originalText;
            }, 2000);
          }
        } catch (err) {
          // Fallback for older browsers
          exportTextarea.select();
          document.execCommand('copy');
        }
      }
    });
    
    // Import functionality
    document.getElementById('import-btn')?.addEventListener('click', () => {
      const importTextarea = document.getElementById('import-data');
      if (importTextarea && importTextarea.value.trim()) {
        try {
          const gameData = JSON.parse(importTextarea.value.trim());
          if (typeof window.importGame === 'function') {
            window.importGame(gameData);
          } else {
            alert('Import function not available. Make sure a game is loaded.');
          }
        } catch (err) {
          alert('Invalid JSON data. Please check the format and try again.');
        }
      } else {
        alert('Please paste game data in the import field.');
      }
    });
    
    // Clear debug functionality
    document.getElementById('clear-debug-btn')?.addEventListener('click', () => {
      if (typeof window.clearDebugGame === 'function') {
        window.clearDebugGame();
        alert('Debug game data cleared.');
      } else {
        alert('Clear function not available. Make sure a game is loaded.');
      }
    });
  }
</script>