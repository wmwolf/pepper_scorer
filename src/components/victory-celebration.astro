// src/components/victory-celebration.astro
---
interface Props {
  winningTeam: string;
  finalScores: [number, number];
  teamNames: [string, string];
  isSeries: boolean;
  seriesScores?: [number, number];
}

const { winningTeam, finalScores, teamNames, isSeries, seriesScores = [0, 0] } = Astro.props;
const winnerIndex = teamNames.indexOf(winningTeam);
const loserIndex = winnerIndex === 0 ? 1 : 0;
---

<div id="victory-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-80 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-500">
  <div class="max-w-2xl w-full mx-4 text-center">
    <!-- Trophy and Confetti Canvas Container -->
    <div class="relative mb-6">
      <canvas id="confetti-canvas" class="absolute inset-0 w-full h-full"></canvas>
      <div class="py-8">
        <span class="text-6xl">üèÜ</span>
      </div>
    </div>
    
    <!-- Victory Announcement -->
    <h2 class="text-4xl font-bold text-white mb-3">
      <span class="text-yellow-300">{winningTeam}</span> Wins!
    </h2>
    
    <!-- Series or Game Indicator -->
    {isSeries && (
      <p class="text-xl text-blue-300 mb-6">
        Final Series Score: {seriesScores[winnerIndex]}-{seriesScores[loserIndex]}
      </p>
    )}
    
    <!-- Final Scores -->
    <div class="bg-white bg-opacity-10 rounded-lg p-6 backdrop-blur-sm mb-8">
      <div class="grid grid-cols-2 gap-8">
        {teamNames.map((team, i) => (
          <div class={`space-y-2 ${i === winnerIndex ? 'text-yellow-300' : 'text-white'}`}>
            <h3 class="text-xl font-semibold">{team}</h3>
            <p class={`text-5xl font-bold ${i === winnerIndex ? 'animate-pulse' : ''}`}>
              {finalScores[i]}
            </p>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Buttons -->
    <div class="flex flex-col sm:flex-row justify-center gap-4">
      <button 
        id="view-history-btn"
        class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
      >
        View Game History
      </button>
      
      {!isSeries ? (
        <button 
          id="make-series-btn"
          class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
        >
          Make it a Series!
        </button>
      ) : (
        <button 
          id="new-series-btn"
          class="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
        >
          New Series
        </button>
      )}
      
      <button 
        id="new-game-btn" 
        class="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
      >
        New Game
      </button>
    </div>
  </div>
</div>

<script>
  import confetti from 'canvas-confetti';
  import { getPath } from '../lib/path-utils';
  
  // Show the victory overlay when component is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('victory-overlay');
    
    // Short delay to ensure DOM is fully rendered
    setTimeout(() => {
      if (overlay) {
        overlay.classList.remove('opacity-0', 'pointer-events-none');
      }
      
      // Fire confetti
      const canvas = document.getElementById('confetti-canvas') as HTMLCanvasElement;
      if (canvas) {
        const myConfetti = confetti.create(canvas, {
          resize: true,
          useWorker: true
        });
        
        // Initial confetti burst
        myConfetti({
          particleCount: 100,
          spread: 160,
          origin: { y: 0.6 }
        });
        
        // Second burst after a delay
        setTimeout(() => {
          myConfetti({
            particleCount: 50,
            angle: 60,
            spread: 80,
            origin: { x: 0 }
          });
          
          myConfetti({
            particleCount: 50,
            angle: 120,
            spread: 80,
            origin: { x: 1 }
          });
        }, 750);
      }
    }, 300);
    
    // Event handlers for buttons
    document.getElementById('view-history-btn')?.addEventListener('click', () => {
      // Scroll to game history section
      const historySection = document.getElementById('game-history-section');
      if (historySection) {
        historySection.scrollIntoView({ behavior: 'smooth' });
        
        // Highlight the history section briefly
        historySection.classList.add('ring-4', 'ring-blue-400', 'ring-opacity-75');
        setTimeout(() => {
          historySection.classList.remove('ring-4', 'ring-blue-400', 'ring-opacity-75');
        }, 2000);
      }
      
      // Hide the overlay with a fade out
      const overlay = document.getElementById('victory-overlay');
      if (overlay) {
        overlay.classList.add('opacity-0', 'pointer-events-none');
      }
    });
    
    document.getElementById('make-series-btn')?.addEventListener('click', () => {
      // Get the current game from localStorage
      const gameData = JSON.parse(localStorage.getItem('currentGame') || '{}');
      if (gameData) {
        const gameManager = window.GameManager.fromJSON(JSON.stringify(gameData));
        gameManager.convertToSeries();
        gameManager.startNextGame();
        localStorage.setItem('currentGame', gameManager.toJSON());
        window.location.reload();
      }
    });
    
    document.getElementById('new-series-btn')?.addEventListener('click', () => {
      localStorage.removeItem('currentGame');
      window.location.href = getPath(''); 
    });
    
    document.getElementById('new-game-btn')?.addEventListener('click', () => {
      localStorage.removeItem('currentGame');
      window.location.href = getPath('');
    });
  });
</script>
